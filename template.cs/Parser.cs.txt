@using Extensions
@using Parser
@using System.Text.RegularExpressions
@using Yanp.Data
@{
if(Model.Syntax.HeaderCode.Length > 0)
{
@:@Model.Syntax.HeaderCode
}
}
using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace @Model.GetDefine("YYNAMESPACE", "Parser");
@Include("Utility.cs")
public partial class Parser
{
    public List<(int Index, @Model.Syntax.Default Value)> TokenStack { get; } = new();
    public static int[,] Tables { get; } = new [,]
        {
@{
var reduce_to_index = Model.GetGrammarLines()
    .Select((x, i) => (x, i))
    .ToDictionary(x => x.x, x => -x.i - 1);

var symbol_to_index = Model.GetSymbols()
    .Select((x, i) => (x, i))
    .ToDictionary(x => x.x.get_Value(), x => x.i);

foreach (var table in Model.Tables)
{
    var line = new int[symbol_to_index.Count];
    table.get_Actions().Where(x => x.Value is ShiftAction).Each(x => line[symbol_to_index[x.Key.get_Value()]] = Model.NodeToTable(x.Value.Cast<ShiftAction>().get_Next()).get_Index());
    table.get_Actions().Where(x => x.Value is ReduceAction).Each(x => line[symbol_to_index[x.Key.get_Value()]] = reduce_to_index[x.Value.Cast<ReduceAction>().get_Reduce()]);
            @:{@string.Join(", ", line)},
}
}
        };

    public @Model.Syntax.Default Parse(ILexer<@Model.Syntax.Default> lex)
    {
        var current = 0;

        while (true)
        {
            var token = lex.PeekToken();
            var x = Tables[current, (int)token.Symbol];

            if (x < 0)
            {
                var (symbol, value) = RunAction(x);
                if (symbol == Symbols._ACCEPT) return value;
                var head = TokenStack.Count == 0 ? 0 : TokenStack[^1].Index;
                current = Tables[head, (int)symbol];

                TokenStack.Add((current, value));
            }
            else if (x == 0)
            {
                Debug.Fail("syntax error");
                SyntaxError(lex.PeekToken());
            }
            else
            {
                _ = lex.ReadToken();
                current = x;
                TokenStack.Add((x, token.Value));
            }
        }
    }

    public (Symbols Symbol, @Model.Syntax.Default Value) RunAction(int yy_no)
    {
        switch (yy_no)
        {
@{
foreach (var reduce in reduce_to_index)
{
    var length = reduce.Key.get_Grammars().Count();
    var action = reduce.Key.get_Action()?.get_Value();
    var actformat = action is { } a ?
        Regex.Replace(a, @"\$(\$|\d+)", m =>
        {
            if (m.Groups[1].Value == "$") return "var yy_value";

            var n = int.Parse(m.Groups[1].Value) - 1;
            var g = reduce.Key.get_Grammars()[n];
            var d = Model.Syntax.Declares[g.get_Value()];

            if (d.get_Type() != "") return $"(({d.get_Type()})GetValueFromLast({length - n}))";
            return $"GetValueFromLast({length - n})";
        })
        : $"var yy_value = GetValueFromLast({length});";
    var sym = ((Func<Token, string>)Model.KeyValues["csterms"])(reduce.Key.get_Name());

            @:case @reduce.Value:
                @:{
                    @:Debug.WriteLine("@reduce.Key");
                    @:@actformat
                    @:return DoAction(Symbols.@sym, yy_value, @length);
                @:}
@:
}
}
            default:
                throw new InvalidProgramException();
        }
    }

    public @Model.Syntax.Default GetValueFromLast(int from_last_index) => TokenStack[^from_last_index].Value;

    public bool IsAccept(Symbols type) => Tables[TokenStack.Count == 0 ? 0 : TokenStack[^1].Index, (int)type] != 0;

    public (Symbols Symbol, @Model.Syntax.Default Value) DoAction(Symbols type, @Model.Syntax.Default value, int length)
    {
        TokenStack.RemoveRange(TokenStack.Count - length, length);
        return (type, value);
    }
}
