@using Parser
@{
var cs_reserved_word = new HashSet<string>
    {
        "abstract",
        "as",
        "base",
        "bool",
        "break",
        "byte",
        "case",
        "catch",
        "char",
        "checked",
        "class",
        "const",
        "continue",
        "decimal",
        "default",
        "delegate",
        "do",
        "double",
        "else",
        "enum",
        "event",
        "explicit",
        "extern",
        "false",
        "finally",
        "fixed",
        "float",
        "for",
        "foreach",
        "goto",
        "if",
        "implicit",
        "in",
        "int",
        "interface",
        "internal",
        "is",
        "lock",
        "long",
        "namespace",
        "new",
        "null",
        "object",
        "operator",
        "out",
        "override",
        "params",
        "private",
        "protected",
        "public",
        "readonly",
        "ref",
        "return",
        "sbyte",
        "sealed",
        "short",
        "sizeof",
        "stackalloc",
        "static",
        "string",
        "struct",
        "switch",
        "this",
        "throw",
        "true",
        "try",
        "typeof",
        "uint",
        "ulong",
        "unchecked",
        "unsafe",
        "ushort",
        "using",
        "virtual",
        "void",
        "volatile",
        "while"
    };

var ascii = new Dictionary<int, string>
    {
        {0x00, "__NUL"},
        {0x01, "__SOH"},
        {0x02, "__STX"},
        {0x03, "__ETX"},
        {0x04, "__EOT"},
        {0x05, "__ENQ"},
        {0x06, "__ACK"},
        {0x07, "__BEL"},
        {0x08, "__BS"},
        {0x09, "__HT"},
        {0x0A, "__LF"},
        {0x0B, "__VT"},
        {0x0C, "__FF"},
        {0x0D, "__CR"},
        {0x0E, "__SO"},
        {0x0F, "__SI"},
        {0x10, "__DLE"},
        {0x11, "__DC1"},
        {0x12, "__DC2"},
        {0x13, "__DC3"},
        {0x14, "__DC4"},
        {0x15, "__NAK"},
        {0x16, "__SYN"},
        {0x17, "__ETB"},
        {0x18, "__CAN"},
        {0x19, "__EM"},
        {0x1A, "__SUB"},
        {0x1B, "__ESC"},
        {0x1C, "__FS"},
        {0x1D, "__GS"},
        {0x1E, "__RS"},
        {0x1F, "__US"},
        {0x20, "__Space"},
        {0x21, "__ExclamationMark"},
        {0x22, "__QuotationMark"},
        {0x23, "__NumberSign"},
        {0x24, "__DollarSign"},
        {0x25, "__PercentSign"},
        {0x26, "__Ampersand"},
        {0x27, "__Apostrophe"},
        {0x28, "__LeftParenthesis"},
        {0x29, "__RightParenthesis"},
        {0x2A, "__Asterisk"},
        {0x2B, "__PlusSign"},
        {0x2C, "__Comma"},
        {0x2D, "__HyphenMinus"},
        {0x2E, "__FullStop"},
        {0x2F, "__Slash"},
        {0x30, "__Num0"},
        {0x31, "__Num1"},
        {0x32, "__Num2"},
        {0x33, "__Num3"},
        {0x34, "__Num4"},
        {0x35, "__Num5"},
        {0x36, "__Num6"},
        {0x37, "__Num7"},
        {0x38, "__Num8"},
        {0x39, "__Num9"},
        {0x3A, "__Colon"},
        {0x3B, "__Semicolon"},
        {0x3C, "__LessThanSign"},
        {0x3D, "__EqualsSign"},
        {0x3E, "__GreaterThanSign"},
        {0x3F, "__QuestionMark"},
        {0x40, "__AtSign"},
        {0x41, "__A"},
        {0x42, "__B"},
        {0x43, "__C"},
        {0x44, "__D"},
        {0x45, "__E"},
        {0x46, "__F"},
        {0x47, "__G"},
        {0x48, "__H"},
        {0x49, "__I"},
        {0x4A, "__J"},
        {0x4B, "__K"},
        {0x4C, "__L"},
        {0x4D, "__M"},
        {0x4E, "__N"},
        {0x4F, "__O"},
        {0x50, "__P"},
        {0x51, "__Q"},
        {0x52, "__R"},
        {0x53, "__S"},
        {0x54, "__T"},
        {0x55, "__U"},
        {0x56, "__V"},
        {0x57, "__W"},
        {0x58, "__X"},
        {0x59, "__Y"},
        {0x5A, "__Z"},
        {0x5B, "__LeftSquareBracket"},
        {0x5C, "__Backslash"},
        {0x5D, "__RightSquareBracket"},
        {0x5E, "__Caret"},
        {0x5F, "__Underscore"},
        {0x60, "__GraveAccent"},
        {0x61, "__a"},
        {0x62, "__b"},
        {0x63, "__c"},
        {0x64, "__d"},
        {0x65, "__e"},
        {0x66, "__f"},
        {0x67, "__g"},
        {0x68, "__h"},
        {0x69, "__i"},
        {0x6A, "__j"},
        {0x6B, "__k"},
        {0x6C, "__l"},
        {0x6D, "__m"},
        {0x6E, "__n"},
        {0x6F, "__o"},
        {0x70, "__p"},
        {0x71, "__q"},
        {0x72, "__r"},
        {0x73, "__s"},
        {0x74, "__t"},
        {0x75, "__u"},
        {0x76, "__v"},
        {0x77, "__w"},
        {0x78, "__x"},
        {0x79, "__y"},
        {0x7A, "__z"},
        {0x7B, "__LeftCurlyBracket"},
        {0x7C, "__VerticalBar"},
        {0x7D, "__RightCurlyBracket"},
        {0x7E, "__Tilde"},
        {0x7F, "__DEL"}
    };
Func<Token, string> csterms = t =>
{
    var v = t.get_Value();
    switch (t.get_Type())
    {
        case Symbols.CHAR:
            var c = (int)v[1];
            if (ascii.ContainsKey(c)) return ascii[c];
            return $"__x{c.ToString("X2")}";

        case Symbols.ACTION:
            return "__ACTION_" + v.Substring(1);

        default:
            if (v == "$END") return $"_END";
            if (cs_reserved_word.Contains(v)) return $"@{v}";
            return v;
    }
};
Model.KeyValues["csterms"] = (object)csterms;
}
